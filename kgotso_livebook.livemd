# Kgotso Learning Elixir

## Pattern matching

```elixir
# Pattern matching->It allows you to destructure and match values against patterns, enabling you to extract and manipulate data ..
# in a concise and expressive way
a = 10
b = 20
c = a + b

IO.puts("The sum of #{a} and #{b} is #{c}.")
```

## Understanding a module and a function

```elixir
defmodule Hello do
  # word is a function 
  def word do
    IO.puts("Hello Kgotso")
  end
end

Hello.word()
```

## Passing a string into a function

```elixir
defmodule Hi do
  def word(name) do
    IO.puts("Hello Kgotso #{name}")
  end
end

Hi.word("kgotso")
```

## DATA TYPES

## Atom

```elixir
# Atoms are useful in cases of applications
# The syntax is just a colon before its name ==> :some_name ... 
# ...if a name of an atom has a space, then u put it in double inverted commas ==> :"Some Name"
:error
{:error, reason} = {:error, "invalid command"}
# {} these curly brackets are called turples

# Its important to note LHS is assigned to RHS...
```

```elixir
# .. so  you can just call LHS, and should expect RHS assigned value
reason
```

```elixir

```

## Strings

```elixir
# Strings are created using double colons
"Kgotso"
# We can check the type of the data structure by using i. i is a function that checks data type...
# ... by saying i("Kgotso") on interactive terminal (iex), we get info of a data type i.e datatype, byte size, description and row representation
# Strings are saved as colection of bytes
```

```elixir
name = "Jerry"
# checks if a varibale is a string
is_binary(name)
```

this is my great string

```elixir
# Adding strings 
message = "Hello " <> name
```

### We can use the power of pattern matching to extract contents  of the string

```elixir
# <> this is called a string concentration operator
"M" <> rest = "Mcasino"
# rest here is assigned all th e characters after M
```

```elixir
# you can decode a character  n this simple way 
?a
```

```elixir
# Extracting the code of the character using Patterm Matching
name = "kgotso"

# the variabe first is going to extract the first charter of name. storing the rest of name's charater as binary
<<first, rest::binary>> = name
first
```

```elixir
# check if its code number
first == ?o
```

```elixir
# it returns as string/binary
rest
```

```elixir
# You can specify how many character you want to extract in a string
<<first::binary-size(3), rest::binary>> = name
first
```

## Charlist

```elixir
# Charlist - collection of charaters in a list
# [] - square brackets  to represent collection of characters within a list , represented by integers
chars = 'kgotso'
```

```elixir
# You can add list as well using ++ instead of <> like in strings
'Hello ' ++ chars
```

```elixir
# You can also check data tye using simply:
is_list(chars)
```

## Turple

```elixir
# data is saved continuosly inside a memory
# created with curly brackets
# normally dont use more than 4 elements inside of a turple, rather go for List

{a, b} = {1, 3}
a
```

```elixir
# exampl of a simle applction in server using turple
{:reply, msg, state} = {:reply, "Input not found", ["good", "complete", "no isssues"]}

state
```

## Procesess

```elixir
# Runs in processes 
# Idenified by PID 
# Inter-ccommunication by Message Passing. Each Process has its Stack & Heap alocation
# Like humans we dont share data, we just communicate using languages 

# check process ID
my_pid = self()
my_pid
```

## Linked List (Singly)

```elixir
# Linked list are not List
# Not a regular array or list
list = ["a", "b", "c"]

# it is important to note that in ELixir Linked List are recursive

# you cant index in Linked list in Elixir

# list{0}  # I get an error
```

```elixir
Enum.at(list, 0)
```

```elixir
# Enum. + Tab ==> shows list og argumnts can each func take . Func Arity. On the Interactive Tool
# h  Enum.at ==>Helper function.  brings documentationo Interation Tool
# Pattern match 
[first, second, third] = list
second
```

```elixir
# You can ignore some couple of elements in a list by using an underscore
[_, _, third] = ["P", "I", "D"]
third
```

```elixir
# you can get the head of the list 
# returns first element
hd(list)
```

```elixir
# can get the rest of the list  and ignore the first elemey
tl(list)
```

```elixir
# Cons operator |
# it is used to Pattern match
# assigning first element to h and rest to t
[h | t] = list
h
```

```elixir
t
```

## Keyword List

```elixir
#
#
# a is a key, 1 is value. A key is actally an atom
data = [a: 1, b: 2]
```

```elixir
# pattern match
[{:a, 1}] = [a: 1]
```

```elixir
# extracting for keyword list
data[:a]
```

## Maps

```elixir
# One of the key thing about mps is that it can be used with different data types
my_map = %{a: 1, b: 2, c: 3}
my_map
```

```elixir
# Pattern match
%{a: first, b: second, c: third} = my_map
first
```

```elixir
# can pattern match  one by one, no need to for the whole map
%{b: second} = my_map
second
```

```elixir
# we can use dot notation to access stuff in a map
my_map.a
```

```elixir
# map created ussing string
map2 = %{"a" => 1, "b" => 2, "c" => 3}
```

```elixir
# exctracting frm a string map
%{"c" => c} = map2
c
```

```elixir
# Uodating a map with strings
map2 = %{map2 | "c" => 4}
```

```elixir
# updating map with Atom 
my_map = %{my_map | c: 4}
```

## Struct

```elixir
# Sturct is defined within a module
# filds in struct are defined in form of keys

defmodule User do
  defstruct username: "", email: "", age: nil
end
```

```elixir
# working with struct is similiar like working with a map
user1 = %User{username: "kgotso", email: "kgotsohlapolosa@gmail.com", age: 21}
```

```elixir
# extracting from a struct
%{username: username} = user1
username
```

```elixir
# Updating in a struct
user1 = %{user1 | age: 29}
```

## Case - Flow Mechanism

```elixir
# Case behave like  switch statements
list = [1, 2, 3]
```

```elixir
case Enum.at(list, 2) do
  1 -> "This is a good sign"
  3 -> "This is alright"
  _ -> "nothing at all"
end
```

```elixir
# Cases can be used with any data structure or type
# this example here is for Struct

defmodule Post do
  defstruct(
    id: nil,
    tittle: "",
    description: "",
    author: ""
  )
end
```

```elixir
# Now fill in contents of your struct
post1 = %Post{id: 1, tittle: "This is the story", author: "Kgotso Hlapolosa"}
```

```elixir
# Now create a case for post1
case post1 do
  %{author: "Kgotso Hlapolosa"} -> "Kgotso saw this"
  %{author: "Thato"} -> "This is thato"
  _ -> "None of the above"
end
```

```elixir
# You can update post1 like any other map
post1 = %{post1 | author: "Blessing"}
```

```elixir
# Update and reevaluate 
# Now create a case for post1
case post1 do
  %{author: "Kgotso Hlapolosa"} -> "Kgotso saw this"
  %{author: "Thato"} -> "This is thato"
  _ -> "None of the above"
end
```

## Cond - Flow Mechanism

```elixir
cond do
  post1.author == "Kgotso Hlapolosa" -> "This is kgotso"
  post1.author == "Thato" -> "this is thato"
  true -> "This is it"
end
```

```elixir
cond do
  hd(list) == 2 -> "Got a one"
  true -> "Head is #{hd(list)}"
end
```

## if/else Flow Mechanism

```elixir
if true do
  "this will work"
else
  "ELse this will work"
end
```

## MIX

Mix -  MIX provides a set of commands and tasks to help you create, manage, and build Elixir projects. It simplifies tasks such as creating a new project, compiling code, running tests, managing dependencies, and more.

<!-- livebook:{"break_markdown":true} -->

When you create a new Elixir project using MIX, it generates several files and folders to organize your project's codebase. Here is a short description of some of the key files and folders that MIX creates:

mix.exs: This is the project configuration file written in Elixir. It contains information about the project, such as its name, version, dependencies, and other settings.

lib/: This folder is where you typically store your project's Elixir source code files. The folder structure inside lib/ mirrors the application structure.

test/: This folder is used to store the test files for your project. Elixir's built-in testing framework, ExUnit, is commonly used to write and run tests in this directory.

config/: This folder contains configuration files for the project. Common files include config.exs, where you can configure various settings for different environments (development, test, production, etc.).

deps/: This folder is automatically created to store the project's dependencies when you fetch them using MIX.

_build/: This folder is created when you compile your project with MIX. It contains the compiled artifacts, such as bytecode and other necessary files, organized by environment.

priv/: This folder is for private files, such as static assets or resources that are used by the application.

assets/ (sometimes included, but depends on the project template): This folder is used for web applications and contains frontend-related assets, such as JavaScript, CSS, and other static files

```elixir
# To create a new project using mix ..
# .. simply type mix new Project_Name
# Then you can open it with code editor by simly getting inside #Project_name then type code . on terminal
```

## Recursion - Tail Recursion - Print Digits

This code below here prints digits in Ascending Stage.

```elixir
defmodule Recursion do
  # This is a base case, incse the input is zero, return zero and exit
  def upto(0), do: 0

  # Receives an input number
  def upto(nums) do
    # it prints the input number
    IO.puts(nums)

    # Here subtract the input number by 1, then go back to the base case and repeat the previous steps
    upto(nums - 1)
  end
end

# Input number is 3. So we expect 3 2 1 0 to be printed
Recursion.upto(3)
```

This code below here prints digits in Ascending Stage

```elixir
defmodule Recursion1 do
  # This is a base case, incse the input is zero, return zero and exit
  def upto(0), do: 0

  # Receives an input number
  def upto(nums) do
    # This function needs to be exhausted. Basically if your inout is 3 ...
    upto(nums - 1)
    # .. it means upto is going subtract 1 from three until it reaches zero ...
    # ...  then when it reaches zero, its gonna print zero then go to IO.puts
    # This statement here does nothing until upto is exhausted, then its gonna print pending task in descending order
    IO.puts(nums)
  end
end

Recursion1.upto(3)
```

## Recursion- Sum degits

```elixir
defmodule Recursion2 do
  # this is a base case 
  def upto(0), do: 0

  # Recursice case statement
  def upto(num) do
    # The function upto has to be exhausted. Remember only the last ouput of the recursion is returned
    num + upto(num - 1)
  end
end

Recursion2.upto(3)
```

## Recursion - Tail Recursion - Sum Digits

We can repeat the same function using Tail Recursion

```elixir
defmodule Recursive3 do
  def upto(0), do: 0

  def upto(num) do
    upto_tail_rec(num)
  end

  # function defination. It accepts num as input. The accumulator is set to default \\ zero
  def upto_tail_rec(num, acc \\ 0)
  # base case cond 
  def upto_tail_rec(0, acc), do: acc

  def upto_tail_rec(num, acc) do
    # recursive call. It will exit when it looks like (0,6). therefore returns 6 
    upto_tail_rec(num - 1, acc + num)
  end
end

Recursive3.upto(3)
```

This Tail Recursive function uses LESS MEMORY.also REUSE THE SAME STACK, meaning there is no exra memoty allocation

## Recursion -Factorial

```elixir
# Remember factorial. 3! = 3*2*1 = 6
defmodule Recursive4 do
  # base case
  def of(1), do: 1
  # recursive func. 
  def of(num), do: num * of(num - 1)
end

Recursive4.of(3)
```

We can do the same but using Tail Recursion

```elixir
defmodule Recursion5 do
  # function defination
  def of_tail_rec(num, acc \\ 1)
  # base case 
  def of_tail_rec(1, acc), do: acc
  def of_tail_rec(num, acc), do: of_tail_rec(num - 1, acc * num)
end

Recursion5.of_tail_rec(3)
```

## Recursion- Reverse Numbers

Here is the simple psudo code of reversing numbers:

```elixir
# num = 0
# acc = 321
# loop:
#     new_num = 1/10 = 0
#     new_acc = 32 * 10 (320) + 1 % 10 (1) = 321
#       repeat till num becomes zero
# return acc

defmodule Recursion6 do
  def of(num, acc \\ 0)
  def of(0, acc), do: acc

  def of(num, acc) do
    # div(123,10) = 12.12 0R 123/10 = 12.3
    new_num = div(num, 10)
    # rem(123,10) = 3
    new_acc = acc * 10 + rem(num, 10)
    of(new_num, new_acc)
  end
end

Recursion6.of(321)
```

## List -and- Recursion

Remmber Lists in Elixir are Linked list
if we  have: list [1,2,3]
It means we have 3 nodes.
[1,]->[2,]->[3,]->nul.  Tail of node 1 is ponting to Head of 2. Tail of node 2 is pointing to Head of 3. Tail of 3 is pointing to Nul.

```elixir
defmodule Recursion7 do
  def sum_simple([]), do: 0
  # Remeber if u have [1,2,3], [h|t] => h=1 and t=2,3
  def sum_simple([h | t]), do: h + sum_simple(t)
end

Recursion7.sum_simple([1, 2, 3])
```

Lets do the same function using Tail Recursion

```elixir
defmodule Recursion8 do
  def sum(nums), do: sum_tail_rec(nums)

  def sum_tail_rec(nums, acc \\ 0)
  def sum_tail_rec([], acc), do: acc
  def sum_tail_rec([h | t], acc), do: sum_tail_rec(t, acc + h)
end

Recursion8.sum([1, 2, 3])
```

## Reverse List

Suppose we have a list=[2,3]

and we want to add node [1,t] to [node 2 Head,t] and  [3, tail] to [node4 Head, t].

It is easir to add tail to Head compared to adding Tail to Head.

T -> H = O(1)
H -> T = O(n)

HERE IS A SIMPLE PSUEDO FOR REVERSING LIST:
list = [1,2,3] -> [2,3] -> [3] -> []
Iterations:
[] -> [1] -> [2,1] -> [3,2,1]

```elixir
defmodule Recursion9 do
  @spec reverse([any()], [any()]) :: [any()]
  def reverse(elements, acc \\ [])
  def reverse([], acc), do: acc
  def reverse([h | t], acc), do: reverse(t, [h | acc])
end

Recursion9.reverse([1, 2, 3])
```

## Map

```elixir
defmodule Recursion10 do
  def map(elements, func, acc \\ [])
  def map([], _, acc), do: acc |> Recursion9.reverse(acc)
  def map([h | t], func, acc), do: map(t, func, [func.(h) | acc])
end

Recursion10.map([1, 2, 3], fn x -> x * 2 end)
```

## Concat

Suppose u want to add to Lists [1,2,3] + [4,5,6] to get [1,2,3,4,5,6].

We know from previous lessons that its harder to add  Tail to HEad as you have to go through the list, this makes it complex.

the simplest way is to start first by reversing the list, then adding the Tail of the reverse list to the Heads of the destinatin. PSUEDO:

[1,2,3] |> [3,2,1] |> [1,2,3,4,5,6]

```elixir
defmodule Recursion11 do
  @spec concat([any()], [any()]) :: [any()]
  def concat(src, dst), do: concat_func(src |> Recursion9.reverse(), dst)
  defp concat_func([], dst), do: dst
  defp concat_func([h | t], dst), do: concat_func(t, [h | dst])
end

Recursion11.concat([1, 2, 3], [4, 5, 6])
```

## Seven Wonders - Project - Part 1

```elixir
defmodule SevenWonders do
  defstruct name: "", country: ""
  alias SevenWonders

  @type t :: %SevenWonders{
          name: String.t(),
          country: String.t()
        }

  @spec all :: [t()]
  def all() do
    [
      %SevenWonders{name: "Taj Mahal", country: "India"},
      %SevenWonders{name: "Chichen Itza", country: "Mexico"},
      %SevenWonders{name: "Petra", country: "Jordan"},
      %SevenWonders{name: "Machu Picchu", country: "Peru"},
      %SevenWonders{name: "Taj Mahal", country: "India"},
      %SevenWonders{name: "Christ the Reedemer", country: "Brazil"},
      %SevenWonders{name: "Colosseum", country: "Italy"},
      %SevenWonders{name: "The Great Wall of CHina", country: "China"}
    ]
  end

  # This is a List and thw type of key that we defined. And it should return oK
  @spec print_names([t()]) :: :ok
  def print_names(wonders) do
    # wonders |> Enum.each(fn %{name: name} -> IO.puts (name) end)   #Here we can also use the pipeline operator to pass wonders into a function
    # wonders will be default input for the function and it will be transfromed  by ou function
    Enum.each(wonders, fn %{name: name} -> IO.puts(name) end)
  end

  @spec filter_by_country([t()], String.t()) :: [t()]
  def filter_by_country(wonders, country) do
    # Using filter function to filter the wonder and country from an input of a  countray name
    wonders |> Enum.filter(fn %{country: country_name} -> country_name == country end)
  end

  # ---------------------- PART 2 ----------------- 

  # Sorting out by the length of the characters in coyntry's name. In Ascending Order
  def sort_by_country_length(wonders) do
    wonders |> Enum.sort(fn x, y -> String.length(x.country) < String.length(y.country) end)
  end

  # Country list using reduce function
  def name_country_list(wonders) do
    wonders |> Enum.reduce([], fn wonder, acc -> [[wonder.name, wonder.country] | acc] end)
  end

  # Country list using reduce function. 
  def name_country_keyword_list(wonders) do
    # returning a turple  "wonder: country"
    wonders
    |> Enum.reduce([], fn wonder, acc -> [{String.to_atom(wonder.name), wonder.country} | acc] end)
  end
end

# here i am basically assigning variable all_wonders to function All that is in SevenWOnders
all_wonders = SevenWonders.all()
```

```elixir

```

This function below calls print_names in the module Seven Wonders, and it is being passed all_wonders

```elixir
# Now I can  print names only
SevenWonders.print_names(all_wonders)
```

This function below calls filter_by_a_country that is in SevenWonders module, and it is being passed  all_wonders and country name

```elixir
# filtering out a wonder and a country
SevenWonders.filter_by_country(all_wonders, "Mexico")
```

Sorting by the lenght of the country's name

```elixir
SevenWonders.sort_by_country_length(all_wonders)
```

Reducing to the format: Wonder, Name of the country

```elixir
SevenWonders.name_country_list(all_wonders)
```

Returning a turple using a reduce function:

```elixir
SevenWonders.name_country_keyword_list(all_wonders)
```

We can use Map as shorter verion to retun names of wonders:

```elixir
Enum.map(all_wonders, fn wonder -> wonder.name end)
```

You can even use a much shorter version tuo return the name of the wonder:

```elixir
# reference to an anonymous function, and this function is going to return the name back
Enum.map(all_wonders, & &1.name)
```

For Comprehenesion
we can use for to extract name

```elixir
for %{name: name} <- all_wonders, do: name
```

## Expense Manager - Project

```elixir
defmodule Expense do
  alias Expense

  defstruct(
    title: "",
    date: nil,
    amount: 0,
    store: ""
  )

  @type t :: %Expense{
          title: String.t(),
          date: Date.t() | nil,
          amount: number(),
          store: String.t()
        }

  @spec sample :: [t()]
  def sample do
    [
      %Expense{title: "iphone", date: ~D[2022-09-12], amount: 6000, store: "Apple"},
      %Expense{title: "Clothes", date: ~D[2022-09-13], amount: 5000, store: "Markham"},
      %Expense{title: "Gadgets", date: ~D[2022-09-14], amount: 4000, store: "Game"}
    ]
  end

  # --------- CALCULATE THE TOTAL AMOUNT SPENT ---------
  @spec total([t]) :: number()
  def total(expense) do
    expense |> Enum.reduce(0, fn expense, acc -> expense.amount + acc end)
  end

  # ----------  SORT BY DATE -------------
  def sort_by_date(expense) do
    expense |> Enum.sort_by(& &1.date)
  end

  # --------------ADDING AN EXPENSE ON A  SAMPLE LIST -------

  @spec add_expense(t) :: [t()]
  def add_expense(%Expense{} = expense) do
    [expense | sample]
  end

  # ---------- UPDATING AN EXPSENSE THAT IS ON A SAMPLE LIST -----

  def update_amount(title, amount) do
    # first: you want to filter the item you want to update
    # Second: you want create a new expense with an updated amount. * Remember all the data types in Elixir are IMMUTABLW
    # third: you want to add this new update expenses onto our list and take out the old one.
    # filters
    [item] = Enum.filter(sample(), fn %{title: expense_title} -> expense_title == title end)
    # creates a new item
    new_item = %{item | amount: amount}
    # append new item to sample list |> delete old item
    [new_item | sample() |> List.delete(item)]
  end
end

sample = Expense.sample()
```

A funtion to calculate the total amount spens on all items:

```elixir
Expense.total(sample)
```

Sort expense by the date:

```elixir
Expense.sort_by_date(sample)
```

Adding an Expense on a list of Sample:

```elixir
expense = %Expense{title: "Stationary", date: ~D[2022-09-15], amount: 3000, store: "CNN"}
# now we have a new expsense, we must now add it to the list
# adding Stationary to Sample
Expense.add_expense(expense)
```

Update an expense inside a Sample List:

```elixir
Expense.update_amount("iphone", 8000)
```

## With statement - dealing with multiple conditions

we going to use an example of a web application. We know for in a web, for a user to login, mutliple conditions needs to me met i.e Authenticate and Verify password

```elixir
#login -> authenticate, verify_passoword

@users ["Kgotso", "Avi", "Mags"]  #dummy database

def authenticate(user) when user in @users, do: {:ok, "authorized"} #if user exist in database, authorize
def authenticate(_), do: {:error, "unauthorized"} #if users is not in database, dont authorize

def verify_password{user, _password} when user in @users, do: {:ok, "password verified"}
def verify_password{_user, password}, do {:error, "wrong password"}

def login(user, password) do
  with {:ok, _auth_msg} <- authenticate(user),
  {:ok, _msg} <-
  
  verify_password(user, password) do
    {:ok, "#{user} logged in succesfully"}
  else
    {:error, msg} -> {:error, msg}
    _ -> :unauthorized
  end
end

end
```
