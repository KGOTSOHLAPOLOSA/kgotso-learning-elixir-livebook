# Kgotso Learning Elixir

## Pattern matching

```elixir
# Pattern matching->It allows you to destructure and match values against patterns, enabling you to extract and manipulate data ..
# in a concise and expressive way
a = 10
b = 20
c = a + b

IO.puts("The sum of #{a} and #{b} is #{c}.")
```

## Understanding a module and a function

```elixir
defmodule Hello do
  # word is a function 
  def word do
    IO.puts("Hello Kgotso")
  end
end

Hello.word()
```

## Passing a string into a function

```elixir
defmodule Hi do
  def word(name) do
    IO.puts("Hello Kgotso #{name}")
  end
end

Hi.word("kgotso")
```

## DATA TYPES

## Atom

```elixir
# Atoms are useful in cases of applications
# The syntax is just a colon before its name ==> :some_name ... 
# ...if a name of an atom has a space, then u put it in double inverted commas ==> :"Some Name"
:error
{:error, reason} = {:error, "invalid command"}
# {} these curly brackets are called turples

# Its important to note LHS is assigned to RHS...
```
